import json
import os
import logging
from typing import List, Dict,Optional,Any
from fastapi import APIRouter,HTTPException
from pydantic import BaseModel, Field
from datetime import datetime
from pymongo import MongoClient
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from langsmith import traceable
from langchain_community.chat_models import ChatCloudflareWorkersAI
"""setting up the logging for the app"""

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("fitness_agents")

agents = APIRouter()

AVAILABLE_FOODS_COUNTER = 100 #limit the number of foods in search results


"""this section for the requests / prompts sent by user to the model for personal stats/preferences"""

class UserProfile(BaseModel):
    user_id : str
    age : Optional[int] = None
    weight : Optional[float] = None
    height : Optional[float] = None
    activity_level : Optional[str]= "moderate"  #"sedentary", "light", "moderate", "active", "very_active" 
    fitness_goal : Optional[str]= "maintenance"  #"body recomposition","bulk","cut",
    target_calories : Optional[int]=None
    target_protein_g: Optional[float] = None
    target_carbs_g: Optional[float] = None
    target_fat_g: Optional[float] = None
    allergies: Optional[List[str]] = []
    dietary_preferences: Optional[List[str]] = []  # vegetarian, vegan, keto, carivorous , etc.
    equipment_available: Optional[List[str]] = []
    workout_frequency: Optional[int] = 3
    workout_duration: Optional[int] = 60  # minutes
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

class MealPlanRequest(BaseModel):
    user_id: str
    meal_counter : Optional[int] = 3
    days: Optional[int] = 7
    preferences: Optional[Dict[str, Any]] = {}


class WorkoutPlanRequest(BaseModel):
    user_id : str
    #bro split is the best anyways XDDD ,source :trust me bro
    split_type : Optional[str] = "bro_split" #full body ,push_pull_legs, upper_lower...etc
    training_style_goal:Optional[str] = "hypertrophy" #strength, endurance
    days_per_week : Optional[int] = 3
    duration_minutes : Optional[int] = 60

class FitnessPlansRespoinse(BaseModel):
     user_id: str
     meal_plan: Optional[Dict[str, Any]] = None
     workout_plan: Optional[Dict[str, Any]] = None
     summary: Optional[str] = None
     generated_at: datetime


"""this sections for the infos generated by the llm as a reponse for the user """

class MealMacros(BaseModel):
    calories : float = Field(description="total calories for the plan")
    protein_g : float =Field(description="protein in grams ")
    carbs_g : float =Field(description="carbs in grams ")
    fat_g : float =Field(description="fats in grams ")

   
class MealFood(BaseModel):
    food_name : Optional[str] = Field(description="name of the proposed food item")
    portion: str = Field(description="Serving size (e.g., '150g', '1 cup', '1 medium')")
    calories: float = Field(description="Calories for this portion")
    protein_g: float = Field(description="Protein in grams for this portion")
    carbs_g: float = Field(description="Carbs in grams for this portion")
    fat_g: float = Field(description="Fat in grams for this portion")

class Meal(BaseModel):
    meal_name : str = Field(description="Name of the meal (e.g., 'Breakfast', 'Snack 1', 'Lunch', 'Snack 2', 'Dinner')")
    doods : List[MealFood] = Field(description ="list of foods in this meal")
    total_macros: MealMacros = Field(description="total macros of this meal")
    preparation_notes : Optional[str] = Field(description="brief preparation notes", default=None)

   
class DailyMealPlan(BaseModel):
    day : int = Field(description = "day number (1->7)")
    day_name : str = Field(description="Day of the week")
    meals : List[Meal] = Field(description="list of meals for the day")
    daily_total_macros : MealMacros = Field(description="Total macros of the day")

class MealPlanStrucutured(BaseModel):
    plan_name: str = Field(description="Name/title for this meal plan")
    days: List[DailyMealPlan] = Field(description="Meal plan for specified number of days")
    target_macros: MealMacros = Field(description="Daily target macros")
    key_principles: List[str] = Field(
        description="Key nutritional principles followed in this plan")
    shopping_tips: List[str] = Field(
        description="Important shopping and preparation tips" )
        
class Exercise(BaseModel):
    exercise_name: str = Field(description="Name of the exercise")
    sets: int = Field(description="Number of sets")
    reps: str = Field(
        description="Number of reps (can be range like '8-12' or specific number)"
    )
    rest_seconds: int = Field(description="Rest time between sets in seconds")
    notes: Optional[str] = Field(description="Form cues or modifications", default=None)


class WorkoutDay(BaseModel):
    day: int = Field(description="Day number in the weekly schedule")
    day_name: str = Field(description="Name of the workout day")
    focus: str = Field(
        description="Main focus of this workout (e.g., 'Upper Body', 'Push', 'Full Body')"
    )
    exercises: List[Exercise] = Field(description="List of exercises for this day")
    estimated_duration: int = Field(description="Estimated workout duration in minutes")
    warm_up: List[str] = Field(description="Warm-up exercises/activities")
    cool_down: List[str] = Field(description="Cool-down exercises/stretches")

class WorkoutPlanStructured(BaseModel):
    plan_name: str = Field(description="Name/title for this workout plan")
    split_type: str = Field(description="Type of training split used")
    training_style: str = Field(description="Primary training style/goal")
    weekly_schedule: List[WorkoutDay] = Field(description="Weekly workout schedule")
    progression_strategy: str = Field(description="How to progress over time")
    equipment_needed: List[str] = Field(description="Equipment required for this plan")
    key_principles: List[str] = Field(
        description="Important training principles to follow"
    )


class ComprehensiveSummary(BaseModel):
    overview: str = Field(
        description="High-level overview of the complete fitness plan"
    )
    key_highlights: List[str] = Field(
        description="Main highlights combining both meal and workout plans"
    )
    synergy_explanation: str = Field(
        description="How the meal and workout plans work together"
    )
    success_tips: List[str] = Field(description="Important tips for achieving success")
    timeline_expectations: str = Field(description="What to expect and when")
    adjustment_recommendations: List[str] = Field(
        description="When and how to adjust the plans"
    )
    motivation_message: str = Field(description="Encouraging closing message")

"""section of MongoDb connection via usda database """
#### to be continued....


""""section of the classes of our agents"""

class ProfileManagementAgent:


    def __init__(self):
        self.llm = ChatCloudflareWorkersAI(
    model="@cf/meta/llama-3.1-8b-instruct",
    temperature=0.3,
    cloudflare_account_id=os.getenv("CF_ACCOUNT_ID"),
    cloudflare_api_token=os.getenv("CLOUD_FLARE_API_TOKEN"),
)
        
    def calculate_bmr(self , profile:UserProfile)-> float :
        if not all([profile.age , profile.height,profile.weight]):
            return 2000 #default fallback
        
        # the bmr formula for an average adult male 
        #male by default for the choice of gender 
        #gender female to be added
        bmr = (10*profile.weight) +(6.25*profile.height)-(5*profile.age)+5
        return bmr


    def claculate_tdee(self,profile:UserProfile)->float:
        """method to calculate the daily energy based on the level of activity of the user"""

        bmr = self.calculate_bmr(profile)

        activity_multipliers_levels = {
            "sedentary" : 1.2,
            "light exercice" : 1.375,
            "moderate exercice" : 1.55,
            "active" : 1.725,
            "very_active" : 1.9,
        }
        multiplier = activity_multipliers_levels.get(profile.activity_level,1.375)
        return bmr*multiplier
    
    def  calculate_macros(self,profile:UserProfile)->Dict[str,float]:
        """"calculate the target macros based on the user activity level"""
        tdee = self.claculate_tdee(profile)

        #adjust the calories based on the goal

        if profile.fitness_goal == "cut":
            target_calories = tdee*0.8   #deficit of 20% 
        elif profile.fitness_goal == "bulk":
            target_calories = tdee*1.1   #surplus of 10%
        else:
            target_calories = tdee

        #standards of macros distributions    
        protein_ratio = 0.30
        carbs_ratio = 0.40
        fat_ratio = 0.30

        return{
            "calories":round(target_calories),
            "protein" : round((target_calories*protein_ratio)/4),
            "carbs" : round((target_calories*carbs_ratio)/4),
            "fats" : round((target_calories*fat_ratio)/9),
            
        }
    
    async def update_profile(self, profile : UserProfile)->UserProfile:
        #update the profile stats with calculated values 

        macros = self.calculate_macros(profile)

        profile.target_calories = macros["calories"]
        profile.target_protein_g = macros["protein"]
        profile.target_carbs_g = macros["carbs"]
        profile.target_fat_g = macros["fat"]

        ## store updates in the mongodb db
        # 
        # 
        # 
        try:
            client = get_mongo_client()
            db = client[os.getenv("MONGO_DB_NAME", "usda_nutrition")]
            profiles = db["user_profiles"]

            profile_dict = profile.model_dump()
            profiles.update_one(
                {"user_id": profile.user_id}, {"$set": profile_dict}, upsert=True
            )
            client.close()

        except Exception as e:
            logger.error(f"Error saving profile: {str(e)}")

        return profile
class MealPlannerAgent : 
    """generates meal plans according to the profile needs from usda database"""    

    def __init__(self, use_cloud_flare: bool =True , use_full_database : bool = True):
            self.collection_name = "branded_foods" if use_full_database else "branded_foods_sample"

            if use_cloud_flare:
                self.llm = ChatCloudflareWorkersAI(
                model="@cf/meta/llama-3.1-8b-instruct",
                temperature=0.3,
                cloudflare_account_id=os.getenv("CF_ACCOUNT_ID"),
                cloudflare_api_token=os.getenv("CLOUD_FLARE_API_TOKEN"),)


    @traceable(name="find_foods_by_citeria")
    async def find_foods_by_criteria(self,criteria: Dict[str,Any])->List[Dict]:
        ###find foods by using the Facebook AI similarity search (FAISS) vector search
        #
        #
        #

        